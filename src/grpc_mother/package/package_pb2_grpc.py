# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import package_pb2 as package__pb2


class PackageStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListPackage = channel.unary_unary(
            '/packages.Package/ListPackage',
            request_serializer=package__pb2.packageRequest.SerializeToString,
            response_deserializer=package__pb2.PackageReply.FromString,
        )
        self.ExistPackage = channel.unary_unary(
            '/packages.Package/ExistPackage',
            request_serializer=package__pb2.PackageExistRequest.SerializeToString,
            response_deserializer=package__pb2.PackageExistReply.FromString,
        )


class PackageServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListPackage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExistPackage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PackageServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'ListPackage': grpc.unary_unary_rpc_method_handler(
            servicer.ListPackage,
            request_deserializer=package__pb2.packageRequest.FromString,
            response_serializer=package__pb2.PackageReply.SerializeToString,
        ),
        'ExistPackage': grpc.unary_unary_rpc_method_handler(
            servicer.ExistPackage,
            request_deserializer=package__pb2.PackageExistRequest.FromString,
            response_serializer=package__pb2.PackageExistReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'packages.Package', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Package(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListPackage(request,
                    target,
                    options=(),
                    channel_credentials=None,
                    call_credentials=None,
                    insecure=False,
                    compression=None,
                    wait_for_ready=None,
                    timeout=None,
                    metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packages.Package/ListPackage',
                                             package__pb2.packageRequest.SerializeToString,
                                             package__pb2.PackageReply.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExistPackage(request,
                     target,
                     options=(),
                     channel_credentials=None,
                     call_credentials=None,
                     insecure=False,
                     compression=None,
                     wait_for_ready=None,
                     timeout=None,
                     metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packages.Package/ExistPackage',
                                             package__pb2.PackageExistRequest.SerializeToString,
                                             package__pb2.PackageExistReply.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
